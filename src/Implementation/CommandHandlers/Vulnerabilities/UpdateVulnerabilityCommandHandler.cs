// /********************************************************************************
//  * Copyright (c) 2020,2021 Beawre Digital SL
//  *
//  * This program and the accompanying materials are made available under the
//  * terms of the Eclipse Public License 2.0 which is available at
//  * http://www.eclipse.org/legal/epl-2.0.
//  *
//  * SPDX-License-Identifier: EPL-2.0 3
//  *
//  ********************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Core.Assets.Implementation.Commands.Vulnerabilities;
using Core.Database;
using MediatR;
using Microsoft.EntityFrameworkCore.Internal;
using Newtonsoft.Json.Linq;

namespace Core.Assets.Implementation.CommandHandlers.Vulnerabilities
{
    public class UpdateVulnerabilityCommandHandler : IRequestHandler<UpdateVulnerabilityCommand, bool>
    {
        private IDatabaseContext _databaseContext;

        public UpdateVulnerabilityCommandHandler(IDatabaseContext databaseContext)
        {
            _databaseContext = databaseContext;
        }

        public Task<bool> Handle(UpdateVulnerabilityCommand request, CancellationToken cancellationToken)
        {
            var item = _databaseContext.Vulnerability.FirstOrDefault(x => x.Id == request.Id);

            item.Id = Guid.NewGuid();
            item.Name = request.Name;
            item.Description = request.Description;

            var payload = JObject.Parse(item.Payload);

            if (payload.ContainsKey("Framework")) payload.SelectToken("Framework").Replace(request.Framework);
            else payload.Add(new JProperty("Framework", request.Framework));

            if (payload.ContainsKey("Type")) payload.SelectToken("Type").Replace(request.Type);
            else payload.Add(new JProperty("Type", request.Type));

            if (payload.ContainsKey("Id")) payload.SelectToken("Id").Replace(request.TypeId);
            else payload.Add(new JProperty("Id", request.TypeId));

            item.Version += 1;

            _databaseContext.Vulnerability.Add(item);
            _databaseContext.SaveChanges();

            return Task.FromResult(true);
        }
    }
}